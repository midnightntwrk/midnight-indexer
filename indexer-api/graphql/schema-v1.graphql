"""
Address type for registration queries.
"""
enum AddressType {
	"""
	Night address.
	"""
	NIGHT
	"""
	DUST address.
	"""
	DUST
	"""
	Cardano stake key.
	"""
	CARDANO_STAKE
}

"""
A block with its relevant data.
"""
type Block {
	"""
	The block hash.
	"""
	hash: HexEncoded!
	"""
	The block height.
	"""
	height: Int!
	"""
	The protocol version.
	"""
	protocolVersion: Int!
	"""
	The UNIX timestamp.
	"""
	timestamp: Int!
	"""
	The hex-encoded block author.
	"""
	author: HexEncoded
	"""
	The parent of this block.
	"""
	parent: Block
	"""
	The transactions within this block.
	"""
	transactions: [Transaction!]!
}

"""
Either a block hash or a block height.
"""
input BlockOffset @oneOf {
	"""
	A hex-encoded block hash.
	"""
	hash: HexEncoded
	"""
	A block height.
	"""
	height: Int
}

"""
A contract action.
"""
interface ContractAction {
	address: HexEncoded!
	state: HexEncoded!
	chainState: HexEncoded!
	transaction: Transaction!
}

"""
Either a block offset or a transaction offset.
"""
input ContractActionOffset @oneOf {
	"""
	Either a block hash or a block height.
	"""
	blockOffset: BlockOffset
	"""
	Either a transaction hash or a transaction identifier.
	"""
	transactionOffset: TransactionOffset
}

"""
Represents a token balance held by a contract.
This type is exposed through the GraphQL API to allow clients to query
unshielded token balances for any contract action (Deploy, Call, Update).
"""
type ContractBalance {
	"""
	Hex-encoded token type identifier.
	"""
	tokenType: HexEncoded!
	"""
	Balance amount as string to support larger integer values (up to 16 bytes).
	"""
	amount: String!
}

"""
A contract call.
"""
type ContractCall implements ContractAction {
	"""
	The hex-encoded serialized address.
	"""
	address: HexEncoded!
	"""
	The hex-encoded serialized state.
	"""
	state: HexEncoded!
	"""
	The hex-encoded serialized contract-specific zswap state.
	"""
	chainState: HexEncoded!
	"""
	The hex-encoded serialized entry point.
	"""
	entryPoint: HexEncoded!
	transaction: Transaction!
	deploy: ContractDeploy!
	"""
	Unshielded token balances held by this contract.
	"""
	unshieldedBalances: [ContractBalance!]!
}

"""
A contract deployment.
"""
type ContractDeploy implements ContractAction {
	"""
	The hex-encoded serialized address.
	"""
	address: HexEncoded!
	"""
	The hex-encoded serialized state.
	"""
	state: HexEncoded!
	"""
	The hex-encoded serialized contract-specific zswap state.
	"""
	chainState: HexEncoded!
	transaction: Transaction!
	"""
	Unshielded token balances held by this contract.
	According to the architecture, deployed contracts must have zero balance.
	"""
	unshieldedBalances: [ContractBalance!]!
}

"""
A contract update.
"""
type ContractUpdate implements ContractAction {
	"""
	The hex-encoded serialized address.
	"""
	address: HexEncoded!
	"""
	The hex-encoded serialized state.
	"""
	state: HexEncoded!
	"""
	The hex-encoded serialized contract-specific zswap state.
	"""
	chainState: HexEncoded!
	transaction: Transaction!
	"""
	Unshielded token balances held by this contract after the update.
	"""
	unshieldedBalances: [ContractBalance!]!
}

"""
DUST commitment information.
"""
type DustCommitment {
	"""
	DUST commitment.
	"""
	commitment: HexEncoded!
	"""
	DUST nullifier (if spent).
	"""
	nullifier: HexEncoded
	"""
	Initial value.
	"""
	value: String!
	"""
	DUST address of owner.
	"""
	owner: HexEncoded!
	"""
	Nonce.
	"""
	nonce: HexEncoded!
	"""
	Creation timestamp.
	"""
	createdAt: Int!
	"""
	Spend timestamp (if spent).
	"""
	spentAt: Int
}

"""
DUST commitment event union type.
"""
union DustCommitmentEvent = DustCommitment | DustCommitmentMerkleUpdate | DustCommitmentProgress

"""
DUST commitment Merkle tree update.
"""
type DustCommitmentMerkleUpdate {
	"""
	Tree index.
	"""
	index: Int!
	"""
	Collapsed update data.
	"""
	collapsedUpdate: HexEncoded!
	"""
	Block height of update.
	"""
	blockHeight: Int!
}

"""
DUST commitment progress information.
"""
type DustCommitmentProgress {
	"""
	Highest processed index.
	"""
	highestIndex: Int!
	"""
	Number of commitments in batch.
	"""
	commitmentCount: Int!
}

"""
Details for DUST deregistration event.
"""
type DustDeregistrationDetails {
	"""
	Cardano stake key address.
	"""
	cardanoAddress: HexEncoded!
	"""
	DUST address.
	"""
	dustAddress: HexEncoded!
}

"""
DUST event from chain processing.
"""
type DustEvent {
	"""
	Transaction hash containing this event.
	"""
	transactionHash: HexEncoded!
	"""
	Logical segment within transaction.
	"""
	logicalSegment: Int!
	"""
	Physical segment within transaction.
	"""
	physicalSegment: Int!
	"""
	Event type.
	"""
	eventType: DustEventType!
	"""
	Event details.
	"""
	eventDetails: DustEventDetails!
}

"""
DUST event details union.
"""
union DustEventDetails = DustInitialUtxoDetails | DustGenerationDtimeUpdateDetails | DustSpendProcessedDetails | DustRegistrationDetails | DustDeregistrationDetails | DustMappingAddedDetails | DustMappingRemovedDetails

"""
Type of DUST event.
"""
enum DustEventType {
	"""
	Initial DUST UTXO creation.
	"""
	DUST_INITIAL_UTXO
	"""
	DUST generation time update.
	"""
	DUST_GENERATION_DTIME_UPDATE
	"""
	DUST spend processed.
	"""
	DUST_SPEND_PROCESSED
	"""
	Registration event.
	"""
	DUST_REGISTRATION
	"""
	Deregistration event.
	"""
	DUST_DEREGISTRATION
	"""
	Mapping added event.
	"""
	DUST_MAPPING_ADDED
	"""
	Mapping removed event.
	"""
	DUST_MAPPING_REMOVED
}

"""
Details for DUST generation time update.
"""
type DustGenerationDtimeUpdateDetails {
	"""
	Updated generation info.
	"""
	generationInfo: DustGenerationInfo!
	"""
	Generation index.
	"""
	generationIndex: Int!
}

"""
DUST generation event union type.
"""
union DustGenerationEvent = DustGenerationInfo | DustGenerationMerkleUpdate | DustGenerationProgress

"""
DUST generation information.
"""
type DustGenerationInfo {
	"""
	Night UTXO hash (or cNIGHT hash for Cardano).
	"""
	nightUtxoHash: HexEncoded!
	"""
	Generation value in Specks (u128 as string).
	"""
	value: String!
	"""
	DUST public key of owner.
	"""
	owner: HexEncoded!
	"""
	Initial nonce for DUST chain.
	"""
	nonce: HexEncoded!
	"""
	Creation time (UNIX timestamp).
	"""
	ctime: Int!
	"""
	Destruction time. None if still generating.
	"""
	dtime: Int
	"""
	Index in generation Merkle tree.
	"""
	merkleIndex: Int!
}

"""
DUST generation Merkle tree update.
"""
type DustGenerationMerkleUpdate {
	"""
	Tree index.
	"""
	index: Int!
	"""
	Collapsed update data.
	"""
	collapsedUpdate: HexEncoded!
	"""
	Block height of update.
	"""
	blockHeight: Int!
}

"""
DUST generation progress information.
"""
type DustGenerationProgress {
	"""
	Highest processed index.
	"""
	highestIndex: Int!
	"""
	Number of active generations.
	"""
	activeGenerationCount: Int!
}

"""
DUST generation status for a specific Cardano stake key.
"""
type DustGenerationStatus {
	"""
	Cardano stake key.
	"""
	cardanoStakeKey: HexEncoded!
	"""
	Associated DUST address if registered.
	"""
	dustAddress: HexEncoded
	"""
	Whether this stake key is registered.
	"""
	isRegistered: Boolean!
	"""
	Generation rate in Specks per second.
	"""
	generationRate: String!
	"""
	Current DUST capacity.
	"""
	currentCapacity: String!
	"""
	NIGHT balance backing generation.
	"""
	nightBalance: String!
}

"""
Details for initial DUST UTXO creation.
"""
type DustInitialUtxoDetails {
	"""
	Initial value.
	"""
	initialValue: String!
	"""
	Owner's DUST public key.
	"""
	owner: HexEncoded!
	"""
	Nonce.
	"""
	nonce: HexEncoded!
	"""
	Sequence number.
	"""
	seq: Int!
	"""
	Creation time.
	"""
	ctime: Int!
	"""
	Backing Night UTXO nonce.
	"""
	backingNight: HexEncoded!
	"""
	Merkle tree index.
	"""
	mtIndex: Int!
	"""
	Generation info.
	"""
	generationInfo: DustGenerationInfo!
	"""
	Generation index.
	"""
	generationIndex: Int!
}

"""
Details for DUST mapping added event.
"""
type DustMappingAddedDetails {
	"""
	Cardano stake key address.
	"""
	cardanoAddress: HexEncoded!
	"""
	DUST address.
	"""
	dustAddress: HexEncoded!
	"""
	UTXO identifier.
	"""
	utxoId: HexEncoded!
}

"""
Details for DUST mapping removed event.
"""
type DustMappingRemovedDetails {
	"""
	Cardano stake key address.
	"""
	cardanoAddress: HexEncoded!
	"""
	DUST address.
	"""
	dustAddress: HexEncoded!
	"""
	UTXO identifier.
	"""
	utxoId: HexEncoded!
}

"""
Type of Merkle tree.
"""
enum DustMerkleTreeType {
	"""
	Commitment Merkle tree.
	"""
	COMMITMENT
	"""
	Generation Merkle tree.
	"""
	GENERATION
}

"""
Transaction containing DUST nullifiers.
"""
type DustNullifierTransaction {
	"""
	Transaction hash.
	"""
	transactionHash: HexEncoded!
	"""
	Block height.
	"""
	blockHeight: Int!
	"""
	Matching nullifier prefixes.
	"""
	matchingNullifierPrefixes: [HexEncoded!]!
}

"""
DUST nullifier transaction event union type.
"""
union DustNullifierTransactionEvent = DustNullifierTransaction | DustNullifierTransactionProgress

"""
DUST nullifier transaction progress.
"""
type DustNullifierTransactionProgress {
	"""
	Highest processed block.
	"""
	highestBlock: Int!
	"""
	Number of matched transactions.
	"""
	matchedCount: Int!
}

"""
DUST parameters information.
"""
type DustParametersInfo {
	"""
	Night to DUST ratio.
	"""
	nightDustRatio: Int!
	"""
	Generation decay rate.
	"""
	generationDecayRate: Int!
	"""
	DUST grace period in seconds.
	"""
	dustGracePeriod: Int!
}

"""
Details for DUST registration event.
"""
type DustRegistrationDetails {
	"""
	Cardano stake key address.
	"""
	cardanoAddress: HexEncoded!
	"""
	DUST address.
	"""
	dustAddress: HexEncoded!
}

"""
Details for DUST spend processed.
"""
type DustSpendProcessedDetails {
	"""
	DUST commitment.
	"""
	commitment: HexEncoded!
	"""
	Commitment index.
	"""
	commitmentIndex: Int!
	"""
	DUST nullifier.
	"""
	nullifier: HexEncoded!
	"""
	Fee amount.
	"""
	vFee: String!
	"""
	Timestamp.
	"""
	time: Int!
	"""
	DUST parameters.
	"""
	params: DustParametersInfo!
}

"""
DUST system state containing current Merkle tree roots and statistics.
"""
type DustSystemState {
	"""
	Current commitment tree root.
	"""
	commitmentTreeRoot: HexEncoded!
	"""
	Current generation tree root.
	"""
	generationTreeRoot: HexEncoded!
	"""
	Current block height.
	"""
	blockHeight: Int!
	"""
	Current timestamp.
	"""
	timestamp: Int!
	"""
	Total number of registrations.
	"""
	totalRegistrations: Int!
}

scalar HexEncoded

type MerkleTreeCollapsedUpdate {
	"""
	The start index into the zswap state.
	"""
	start: Int!
	"""
	The end index into the zswap state.
	"""
	end: Int!
	"""
	The hex-encoded merkle-tree collapsed update.
	"""
	update: HexEncoded!
	"""
	The protocol version.
	"""
	protocolVersion: Int!
}

type Mutation {
	"""
	Connect the wallet with the given viewing key and return a session ID.
	"""
	connect(viewingKey: ViewingKey!): HexEncoded!
	"""
	Disconnect the wallet with the given session ID.
	"""
	disconnect(sessionId: HexEncoded!): Unit!
}

type Query {
	"""
	Find a block for the given optional offset; if not present, the latest block is returned.
	"""
	block(offset: BlockOffset): Block
	"""
	Find transactions for the given offset.
	"""
	transactions(offset: TransactionOffset!): [Transaction!]!
	"""
	Find a contract action for the given address and optional offset.
	"""
	contractAction(address: HexEncoded!, offset: ContractActionOffset): ContractAction
	"""
	Get current DUST system state.
	"""
	currentDustState: DustSystemState!
	"""
	Get DUST generation status for specific stake keys (DOS protected).
	"""
	dustGenerationStatus(cardanoStakeKeys: [HexEncoded!]!): [DustGenerationStatus!]!
	"""
	Get historical Merkle tree root for a specific timestamp.
	"""
	dustMerkleRoot(treeType: DustMerkleTreeType!, timestamp: Int!): HexEncoded
	"""
	Get DUST events by transaction hash.
	"""
	dustEventsByTransaction(transactionHash: HexEncoded!): [DustEvent!]!
	"""
	Get recent DUST events with optional filtering.
	"""
	recentDustEvents(limit: Int, eventType: DustEventType): [DustEvent!]!
}

"""
Registration address input.
"""
input RegistrationAddress {
	"""
	Type of address.
	"""
	addressType: AddressType!
	"""
	Address value.
	"""
	value: HexEncoded!
}

"""
Registration update information.
"""
type RegistrationUpdate {
	"""
	Cardano stake key.
	"""
	cardanoStakeKey: HexEncoded!
	"""
	DUST address.
	"""
	dustAddress: HexEncoded!
	"""
	Whether this registration is active.
	"""
	isActive: Boolean!
	"""
	Registration timestamp.
	"""
	registeredAt: Int!
	"""
	Removal timestamp (if removed).
	"""
	removedAt: Int
}

"""
Registration update event union type.
"""
union RegistrationUpdateEvent = RegistrationUpdate | RegistrationUpdateProgress

"""
Registration update progress.
"""
type RegistrationUpdateProgress {
	"""
	Latest processed timestamp.
	"""
	latestTimestamp: Int!
	"""
	Number of updates in batch.
	"""
	updateCount: Int!
}

type RelevantTransaction {
	"""
	Relevant transaction for the wallet.
	"""
	transaction: Transaction!
	"""
	The start index.
	"""
	start: Int!
	"""
	The end index.
	"""
	end: Int!
}

"""
One of many segments for a partially successful transaction result showing success for some
segment.
"""
type Segment {
	"""
	Segment ID.
	"""
	id: Int!
	"""
	Successful or not.
	"""
	success: Boolean!
}

"""
An event of the shielded transactions subscription.
"""
union ShieldedTransactionsEvent = ViewingUpdate | ShieldedTransactionsProgress

"""
Aggregates information about the shielded transactions indexing progress.
"""
type ShieldedTransactionsProgress {
	"""
	The highest end index into the zswap state of all currently known transactions.
	"""
	highestIndex: Int!
	"""
	The highest end index into the zswap state of all currently known relevant transactions,
	i.e. those that belong to any known wallet. Less or equal `highest_index`.
	"""
	highestRelevantIndex: Int!
	"""
	The highest end index into the zswap state of all currently known relevant transactions for
	a particular wallet. Less or equal `highest_relevant_index`.
	"""
	highestRelevantWalletIndex: Int!
}

type Subscription {
	"""
	Subscribe to blocks starting at the given offset or at the latest block if the offset is
	omitted.
	"""
	blocks(offset: BlockOffset): Block!
	"""
	Subscribe to contract actions with the given address starting at the given offset or at the
	latest block if the offset is omitted.
	"""
	contractActions(address: HexEncoded!, offset: BlockOffset): ContractAction!
	"""
	Subscribe shielded transaction events for the given session ID starting at the given index
	or at zero if omitted.
	"""
	shieldedTransactions(sessionId: HexEncoded!, index: Int, sendProgressUpdates: Boolean): ShieldedTransactionsEvent!
	"""
	Subscribe unshielded transaction events for the given address and the given transaction ID
	or zero if omitted.
	"""
	unshieldedTransactions(address: UnshieldedAddress!, transactionId: Int): UnshieldedTransactionsEvent!
	"""
	Stream generation info with merkle updates for wallet reconstruction.
	"""
	dustGenerations(dustAddress: HexEncoded!, fromGenerationIndex: Int, fromMerkleIndex: Int, onlyActive: Boolean): DustGenerationEvent!
	"""
	Stream regular transactions containing DUST nullifiers.
	"""
	dustNullifierTransactions(prefixes: [HexEncoded!]!, minPrefixLength: Int!, fromBlock: Int): DustNullifierTransactionEvent!
	"""
	Stream DUST commitments with merkle tree updates, filtered by prefix.
	"""
	dustCommitments(commitmentPrefixes: [HexEncoded!]!, startIndex: Int!, minPrefixLength: Int!): DustCommitmentEvent!
	"""
	Stream registration changes for multiple address types.
	"""
	dustRegistrationUpdates(addresses: [RegistrationAddress!]!): RegistrationUpdateEvent!
}

"""
A transaction with its relevant data.
"""
type Transaction {
	"""
	The transaction ID.
	"""
	id: Int!
	"""
	The hex-encoded transaction hash.
	"""
	hash: HexEncoded!
	"""
	The protocol version.
	"""
	protocolVersion: Int!
	"""
	The hex-encoded serialized transaction content.
	"""
	raw: HexEncoded!
	"""
	The result of applying a transaction to the ledger state.
	"""
	transactionResult: TransactionResult!
	"""
	Fee information for this transaction.
	"""
	fees: TransactionFees!
	"""
	The hex-encoded serialized transaction identifiers.
	"""
	identifiers: [HexEncoded!]!
	"""
	The hex-encoded serialized merkle-tree root.
	"""
	merkleTreeRoot: HexEncoded!
	"""
	The block for this transaction.
	"""
	block: Block!
	"""
	The contract actions.
	"""
	contractActions: [ContractAction!]!
	"""
	Unshielded UTXOs created by this transaction.
	"""
	unshieldedCreatedOutputs: [UnshieldedUtxo!]!
	"""
	Unshielded UTXOs spent (consumed) by this transaction.
	"""
	unshieldedSpentOutputs: [UnshieldedUtxo!]!
}

"""
Fees information for a transaction, including both paid and estimated fees.
"""
type TransactionFees {
	"""
	The actual fees paid for this transaction in DUST.
	"""
	paidFees: String!
	"""
	The estimated fees that was calculated for this transaction in DUST.
	"""
	estimatedFees: String!
}

"""
Either a transaction hash or a transaction identifier.
"""
input TransactionOffset @oneOf {
	"""
	A hex-encoded transaction hash.
	"""
	hash: HexEncoded
	"""
	A hex-encoded transaction identifier.
	"""
	identifier: HexEncoded
}

"""
The result of applying a transaction to the ledger state. In case of a partial success (status),
there will be segments.
"""
type TransactionResult {
	status: TransactionResultStatus!
	segments: [Segment!]
}

"""
The status of the transaction result: success, partial success or failure.
"""
enum TransactionResultStatus {
	SUCCESS
	PARTIAL_SUCCESS
	FAILURE
}

scalar Unit

scalar UnshieldedAddress

"""
A transaction that created and/or spent UTXOs alongside these and other information.
"""
type UnshieldedTransaction {
	"""
	The transaction that created and/or spent UTXOs.
	"""
	transaction: Transaction!
	"""
	UTXOs created in the above transaction, possibly empty.
	"""
	createdUtxos: [UnshieldedUtxo!]!
	"""
	UTXOs spent in the above transaction, possibly empty.
	"""
	spentUtxos: [UnshieldedUtxo!]!
}

"""
An event of the unshielded transactions subscription.
"""
union UnshieldedTransactionsEvent = UnshieldedTransaction | UnshieldedTransactionsProgress

"""
Information about the unshielded indexing progress.
"""
type UnshieldedTransactionsProgress {
	"""
	The highest transaction ID of all currently known transactions for a subscribed address.
	"""
	highestTransactionId: Int!
}

"""
Represents an unshielded UTXO.
"""
type UnshieldedUtxo {
	"""
	Owner Bech32m-encoded address.
	"""
	owner: UnshieldedAddress!
	"""
	Token hex-encoded serialized token type.
	"""
	tokenType: HexEncoded!
	"""
	UTXO value (quantity) as a string to support u128.
	"""
	value: String!
	"""
	Index of this output within its creating transaction.
	"""
	outputIndex: Int!
	"""
	The hex-encoded serialized intent hash.
	"""
	intentHash: HexEncoded!
	"""
	Transaction that created this UTXO.
	"""
	createdAtTransaction: Transaction!
	"""
	Transaction that spent this UTXO.
	"""
	spentAtTransaction: Transaction
}

scalar ViewingKey

"""
Aggregates a relevant transaction with the next start index and an optional collapsed
Merkle-Tree update.
"""
type ViewingUpdate {
	"""
	Next start index into the zswap state to be queried. Usually the end index of the included
	relevant transaction plus one unless that is a failure in which case just its end
	index.
	"""
	index: Int!
	"""
	Relevant transaction for the wallet and maybe a collapsed Merkle-Tree update.
	"""
	update: [ZswapChainStateUpdate!]!
}

union ZswapChainStateUpdate = MerkleTreeCollapsedUpdate | RelevantTransaction

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"""
Indicates that an Input Object is a OneOf Input Object (and thus requires exactly one of its field be provided)
"""
directive @oneOf on INPUT_OBJECT
"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}

