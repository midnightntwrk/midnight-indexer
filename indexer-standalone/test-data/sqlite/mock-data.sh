#!/bin/bash
# SQLite mock data script for development and testing
# Provides comprehensive test data matching PostgreSQL with additional DUST UTXOs and merkle trees

set -e

echo "==================================="
echo "Loading SQLite Mock Data"
echo "==================================="

# Default database path - can be overridden by environment variable
DB_PATH="${DATABASE_FILE:-${SQLITE_DB_PATH:-/data/indexer.sqlite}}"

echo "Using SQLite database at: $DB_PATH"
echo "Creating clean test data with proper 32-byte hashes..."

sqlite3 "$DB_PATH" << 'EOF'
-- Start fresh
BEGIN TRANSACTION;

-- Clear everything (SQLite doesn't support TRUNCATE, use DELETE)
DELETE FROM dust_events;
DELETE FROM dust_utxos;
DELETE FROM dust_generation_info;
DELETE FROM dust_commitment_tree;
DELETE FROM dust_generation_tree;
DELETE FROM cnight_registrations;
DELETE FROM contract_balances;
DELETE FROM unshielded_utxos;
DELETE FROM relevant_transactions;
DELETE FROM contract_actions;
DELETE FROM transaction_identifiers;
DELETE FROM transactions;
DELETE FROM blocks;
DELETE FROM wallets;

-- Insert 10 blocks with proper 32-byte hashes and December 2024 timestamps
INSERT INTO blocks (hash, height, protocol_version, parent_hash, author, timestamp) VALUES
(X'0000000000000000000000000000000000000000000000000000000000000000', 0, 13000, X'0000000000000000000000000000000000000000000000000000000000000000', NULL, 1733000000000),
(X'1111111111111111111111111111111111111111111111111111111111111111', 1, 13000, X'0000000000000000000000000000000000000000000000000000000000000000', NULL, 1733000002000),
(X'2222222222222222222222222222222222222222222222222222222222222222', 2, 13000, X'1111111111111111111111111111111111111111111111111111111111111111', NULL, 1733000004000),
(X'3333333333333333333333333333333333333333333333333333333333333333', 3, 13000, X'2222222222222222222222222222222222222222222222222222222222222222', NULL, 1733000006000),
(X'4444444444444444444444444444444444444444444444444444444444444444', 4, 13000, X'3333333333333333333333333333333333333333333333333333333333333333', NULL, 1733000008000),
(X'5555555555555555555555555555555555555555555555555555555555555555', 5, 13000, X'4444444444444444444444444444444444444444444444444444444444444444', NULL, 1733000010000),
(X'6666666666666666666666666666666666666666666666666666666666666666', 6, 13000, X'5555555555555555555555555555555555555555555555555555555555555555', NULL, 1733000012000),
(X'7777777777777777777777777777777777777777777777777777777777777777', 7, 13000, X'6666666666666666666666666666666666666666666666666666666666666666', NULL, 1733000014000),
(X'8888888888888888888888888888888888888888888888888888888888888888', 8, 13000, X'7777777777777777777777777777777777777777777777777777777777777777', NULL, 1733000016000),
(X'9999999999999999999999999999999999999999999999999999999999999999', 9, 13000, X'8888888888888888888888888888888888888888888888888888888888888888', NULL, 1733000018000);

-- Insert 11 transactions matching PostgreSQL exactly
-- Note: SQLite uses JSON for transaction_result field
INSERT INTO transactions (hash, block_id, protocol_version, transaction_result, raw, merkle_tree_root, start_index, end_index, paid_fees, estimated_fees) VALUES
-- Block 0 transactions
(X'0000000000000000000000000000000000000000000000000000000000000001', (SELECT id FROM blocks WHERE height = 0), 13000, '"Success"', X'00', X'0000000000000000000000000000000000000000000000000000000000000001', 0, 5, X'00000000000000000000000000018698', X'00000000000000000000000000018698'),
(X'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', (SELECT id FROM blocks WHERE height = 0), 13000, '"Success"', X'00', X'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 51, 55, X'0000000000000000000000003b9aca00', X'0000000000000000000000003b9aca00'),
-- Block 1
(X'1111111111111111111111111111111111111111111111111111111111111111', (SELECT id FROM blocks WHERE height = 1), 13000, '"Success"', X'01', X'1111111111111111111111111111111111111111111111111111111111111111', 6, 10, X'00000000000000000000000000024918', X'00000000000000000000000000024918'),
-- Block 2
(X'2222222222222222222222222222222222222222222222222222222222222222', (SELECT id FROM blocks WHERE height = 2), 13000, '"Success"', X'02', X'2222222222222222222222222222222222222222222222222222222222222222', 11, 15, X'00000000000000000000000000030d40', X'00000000000000000000000000030d40'),
-- Block 3
(X'3333333333333333333333333333333333333333333333333333333333333333', (SELECT id FROM blocks WHERE height = 3), 13000, '"Success"', X'00', X'3333333333333333333333333333333333333333333333333333333333333333', 16, 20, X'0000000000000000000000000003d090', X'0000000000000000000000000003d090'),
-- Block 4
(X'4444444444444444444444444444444444444444444444444444444444444444', (SELECT id FROM blocks WHERE height = 4), 13000, '"Success"', X'00', X'4444444444444444444444444444444444444444444444444444444444444444', 21, 25, X'00000000000000000000000000049338', X'00000000000000000000000000049338'),
-- Block 5
(X'5555555555555555555555555555555555555555555555555555555555555555', (SELECT id FROM blocks WHERE height = 5), 13000, '"Success"', X'00', X'5555555555555555555555555555555555555555555555555555555555555555', 26, 30, X'0000000000000000000000000007a120', X'0000000000000000000000000007a120'),
-- Block 6
(X'6666666666666666666666666666666666666666666666666666666666666666', (SELECT id FROM blocks WHERE height = 6), 13000, '"Success"', X'00', X'6666666666666666666666666666666666666666666666666666666666666666', 31, 35, X'00000000000000000000000000086470', X'00000000000000000000000000086470'),
-- Block 7
(X'7777777777777777777777777777777777777777777777777777777777777777', (SELECT id FROM blocks WHERE height = 7), 13000, '"Success"', X'00', X'7777777777777777777777777777777777777777777777777777777777777777', 36, 40, X'00000000000000000000000000092760', X'00000000000000000000000000092760'),
-- Block 8
(X'8888888888888888888888888888888888888888888888888888888888888888', (SELECT id FROM blocks WHERE height = 8), 13000, '"Success"', X'00', X'8888888888888888888888888888888888888888888888888888888888888888', 41, 45, X'0000000000000000000000000009eb10', X'0000000000000000000000000009eb10'),
-- Block 9
(X'9999999999999999999999999999999999999999999999999999999999999999', (SELECT id FROM blocks WHERE height = 9), 13000, '"Success"', X'00', X'9999999999999999999999999999999999999999999999999999999999999999', 46, 50, X'000000000000000000000000000aae60', X'000000000000000000000000000aae60');

COMMIT;

-- Insert unshielded UTXOs in separate transaction
BEGIN TRANSACTION;

-- Create unshielded UTXOs matching existing transactions (simplified to just one like PostgreSQL)
INSERT INTO unshielded_utxos (creating_transaction_id, spending_transaction_id, owner, token_type, value, output_index, intent_hash)
SELECT 
    creating_tx.id,
    NULL, -- not spent
    X'6e09aea334dcb2e7cf6ea3734faba08794ef0edc4a56c1c799f7fbe806b62d6a',
    X'0000000000000000000000000000000000000000000000000000000000000000',
    X'00000000000000000000000218711a00',
    0,
    X'6dadbce210a7006eb0f8f11079182a75b6c46c5526b9890ba51348ab07cf9b00'
FROM transactions creating_tx
WHERE creating_tx.hash = X'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';

COMMIT;

-- Insert DUST data in separate transaction
BEGIN TRANSACTION;

-- Create DUST registrations with 32-byte addresses
INSERT INTO cnight_registrations (cardano_address, dust_address, is_valid, registered_at) VALUES
(X'1234567890abcdef1234567890abcdef', X'fedcba0987654321fedcba0987654321fedcba0987654321fedcba0987654321', 1, 1733000020000),
(X'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', X'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 1, 1733000022000),
(X'cccccccccccccccccccccccccccccccccccccccc', X'dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd', 1, 1733000024000),
(X'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee', X'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 1, 1733000026000),
(X'1111111111111111111111111111111111111111', X'2222222222222222222222222222222222222222222222222222222222222222', 1, 1733000028000);

-- Create DUST generations matching PostgreSQL (6 entries to match midnight-explorer test data)
INSERT INTO dust_generation_info (night_utxo_hash, value, owner, nonce, ctime, merkle_index, dtime)
VALUES
-- For Test Key 1: 2B NIGHT
(X'1111111111111111111111111111111111111111111111111111111111111111', X'00000000000000000000000773594000', X'fedcba0987654321fedcba0987654321fedcba0987654321fedcba0987654321', X'00', 1733000030000, 0, 1733000040000),
-- For Test Key 2: 4B NIGHT
(X'2222222222222222222222222222222222222222222222222222222222222222', X'00000000000000000000000ee6b28000', X'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', X'01', 1733000032000, 1, 1733000042000),
-- For Test Key 3: 5B NIGHT
(X'3333333333333333333333333333333333333333333333333333333333333333', X'0000000000000000000000012a05f200', X'dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd', X'02', 1733000034000, 2, 1733000044000),
-- For Test Key 4: 7B + 8B NIGHT
(X'4444444444444444444444444444444444444444444444444444444444444444', X'00000000000000000000001a13b86000', X'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', X'03', 1733000036000, 3, 1733000046000),
(X'5555555555555555555555555555555555555555555555555555555555555555', X'00000000000000000000001dcd650000', X'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', X'04', 1733000038000, 4, 1733000048000),
-- For Test Key 5: 10B NIGHT
(X'6666666666666666666666666666666666666666666666666666666666666666', X'00000000000000000000002540be4000', X'2222222222222222222222222222222222222222222222222222222222222222', X'05', 1733000040000, 5, 1733000050000);

COMMIT;

-- Create DUST UTXOs with 32-byte commitments and nonces, u128 values
BEGIN TRANSACTION;

INSERT INTO dust_utxos (generation_info_id, commitment, initial_value, owner, nonce, seq, ctime)
SELECT 
    dg.id,
    -- Using random but deterministic hex values for commitment based on id and seq
    CASE seq.num 
        WHEN 0 THEN X'69286d746e656d6d6f632105f5e10069286d746e656d6d6f632105f5e1000000'
        WHEN 1 THEN X'69286d746e656d6d6f632105f5e11069286d746e656d6d6f632105f5e1100000'
        WHEN 2 THEN X'69286d746e656d6d6f632105f5e12069286d746e656d6d6f632105f5e1200000'
    END,
    -- Value is 1/10th of generation value
    CASE (dg.merkle_index + 1)
        WHEN 1 THEN X'00000000000000000000000005f5e100'  -- 100000000
        WHEN 2 THEN X'0000000000000000000000000bebc200'  -- 200000000
        WHEN 3 THEN X'00000000000000000000000011e1a300'  -- 300000000
        WHEN 4 THEN X'00000000000000000000000017d78400'  -- 400000000
        WHEN 5 THEN X'0000000000000000000000001dcd6500'  -- 500000000
        WHEN 6 THEN X'00000000000000000000000023c34600'  -- 600000000
        WHEN 7 THEN X'00000000000000000000000029b92700'  -- 700000000
        WHEN 8 THEN X'0000000000000000000000002faf0800'  -- 800000000
        WHEN 9 THEN X'00000000000000000000000035a4e900'  -- 900000000
        WHEN 10 THEN X'0000000000000000000000003b9aca00' -- 1000000000
    END,
    dg.owner,
    -- Using random but deterministic hex values for nonce based on id and seq
    CASE seq.num
        WHEN 0 THEN X'302063656e6f6e05f5e100302063656e6f6e05f5e100302063656e6f6e050000'
        WHEN 1 THEN X'312063656e6f6e05f5e110312063656e6f6e05f5e110312063656e6f6e050000'
        WHEN 2 THEN X'322063656e6f6e05f5e120322063656e6f6e05f5e120322063656e6f6e050000'
    END,
    seq.num,
    dg.ctime
FROM dust_generation_info dg
CROSS JOIN (SELECT 0 as num UNION ALL SELECT 1 UNION ALL SELECT 2) as seq;

-- Create merkle trees with 32-byte roots
INSERT INTO dust_commitment_tree (block_height, root, tree_data)
SELECT 
    height,
    -- Using deterministic hex based on block height
    CASE height
        WHEN 0 THEN X'3074686769656800746f6f725f746e656d74696d6d6f63307468676965680000'
        WHEN 2 THEN X'3274686769656800746f6f725f746e656d74696d6d6f63327468676965680000'
        WHEN 4 THEN X'3474686769656800746f6f725f746e656d74696d6d6f63347468676965680000'
        WHEN 6 THEN X'3674686769656800746f6f725f746e656d74696d6d6f63367468676965680000'
        WHEN 8 THEN X'3874686769656800746f6f725f746e656d74696d6d6f63387468676965680000'
    END,
    X'01'
FROM blocks
WHERE height % 2 = 0;

INSERT INTO dust_generation_tree (block_height, root, tree_data)
SELECT 
    height,
    -- Using deterministic hex based on block height
    CASE height
        WHEN 0 THEN X'3074686769656800746f6f725f6e6f69746172656e6767307468676965680000'
        WHEN 2 THEN X'3274686769656800746f6f725f6e6f69746172656e6267327468676965680000'
        WHEN 4 THEN X'3474686769656800746f6f725f6e6f69746172656e6467347468676965680000'
        WHEN 6 THEN X'3674686769656800746f6f725f6e6f69746172656e6667367468676965680000'
        WHEN 8 THEN X'3874686769656800746f6f725f6e6f69746172656e6867387468676965680000'
    END,
    X'02'
FROM blocks
WHERE height % 2 = 0;

COMMIT;

-- Insert relevant_transactions for address tracking
BEGIN TRANSACTION;

-- Create wallet entries for addresses that have UTXOs
INSERT INTO wallets (id, session_id, viewing_key, last_indexed_transaction_id, active, last_active) 
SELECT DISTINCT 
    randomblob(16),  -- Generate random UUID
    owner,           -- Use owner as session_id for simplicity
    X'0000000000000000000000000000000000000000000000000000000000000000',  -- Dummy viewing key
    0,
    1,
    1733000050  -- SQLite uses seconds, not milliseconds
FROM unshielded_utxos;

-- Link transactions to wallets based on UTXOs
INSERT INTO relevant_transactions (wallet_id, transaction_id)
SELECT DISTINCT 
    w.id,
    u.creating_transaction_id
FROM unshielded_utxos u
JOIN wallets w ON w.session_id = u.owner
UNION
SELECT DISTINCT 
    w.id,
    u.spending_transaction_id
FROM unshielded_utxos u
JOIN wallets w ON w.session_id = u.owner
WHERE u.spending_transaction_id IS NOT NULL
ORDER BY 2;

COMMIT;

-- Summary
SELECT 'Test Data Created:' as status;
SELECT 'Blocks' as type, COUNT(*) as count FROM blocks
UNION ALL SELECT 'Transactions', COUNT(*) FROM transactions
UNION ALL SELECT 'Unshielded UTXOs', COUNT(*) FROM unshielded_utxos
UNION ALL SELECT 'DUST Registrations', COUNT(*) FROM cnight_registrations
UNION ALL SELECT 'DUST Generations', COUNT(*) FROM dust_generation_info
UNION ALL SELECT 'DUST UTXOs', COUNT(*) FROM dust_utxos
UNION ALL SELECT 'Commitment Trees', COUNT(*) FROM dust_commitment_tree
UNION ALL SELECT 'Generation Trees', COUNT(*) FROM dust_generation_tree
UNION ALL SELECT 'Wallets', COUNT(*) FROM wallets
UNION ALL SELECT 'Relevant Transactions', COUNT(*) FROM relevant_transactions;

-- Verify genesis block has transactions
SELECT 
    'Genesis Block' as block,
    COUNT(*) as transaction_count
FROM transactions t
JOIN blocks b ON t.block_id = b.id
WHERE b.height = 0;

EOF

echo ""
echo "✅ SUCCESS! Complete test data with all tables populated!"
echo ""
echo "Your SQLite database now contains:"
echo "- 10 blocks with December 2024 timestamps"
echo "- 11 transactions matching PostgreSQL exactly"
echo "- 1 unshielded UTXO (simplified like PostgreSQL)"
echo "- 5 DUST registrations matching midnight-explorer test keys"
echo "- 6 DUST generations (matching PostgreSQL)"
echo "- 18 DUST UTXOs (3 per generation - more than PostgreSQL!)"
echo "- Merkle tree snapshots for commitment and generation trees"
echo "- Transaction fees for all transactions"
echo "- Wallet entries for addresses with UTXOs"
echo "- Relevant transaction mappings for address tracking"
echo ""
echo "This provides comprehensive test data for all DUST-related features!"