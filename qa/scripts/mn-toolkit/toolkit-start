#!/bin/bash

set -e

CHAIN=$1
if [ -z "$CHAIN" ]; then
    echo "Please provide a chain id"
    echo "Usage: $0 <chain_id>"
    exit 1
fi

# Determine NODE_TAG: check environment variable first, then NODE_VERSION file, then default
if [ -z "$NODE_TAG" ]; then
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../../" && pwd)"
    
    if [ -f "$PROJECT_ROOT/NODE_VERSION" ]; then
        NODE_TAG=$(cat "$PROJECT_ROOT/NODE_VERSION")
        echo "NODE_TAG derived from NODE_VERSION file: $NODE_TAG"
    else
        NODE_TAG="0.13.2-rc.2"
        echo "NODE_TAG not specified, using default: $NODE_TAG"
    fi
else
    echo "Using NODE_TAG from environment: $NODE_TAG"
fi
if [ "$CHAIN" != "undeployed" ] && [ "$CHAIN" != "devnet" ] && [ "$CHAIN" != "testnet02" ] && [ "$CHAIN" != "nodedev01" ] && [ "$CHAIN" != "preview" ]; then
    echo "Please provide a valid chain id (undeployed, devnet, testnet02, nodedev01, preview)"
    echo "Usage: $0 <chain_id>"
    exit 1
fi

TARGET_DIR=./.tmp/toolkit

mkdir -p $TARGET_DIR
mkdir -p $TARGET_DIR/.sync_cache-$CHAIN

CONTAINER_NAME="toolkit-${CHAIN}"

# Check if container is already running
if docker ps --format "table {{.Names}}" | grep -q "^${CONTAINER_NAME}$"; then
    echo "Container ${CONTAINER_NAME} is already running"
    exit 0
fi

# Check if container exists but is stopped
if docker ps -a --format "table {{.Names}}" | grep -q "^${CONTAINER_NAME}$"; then
    echo "Container ${CONTAINER_NAME} exists but is stopped. Starting it..."
    docker start "$CONTAINER_NAME"
    exit 0
fi

echo "Starting new container ${CONTAINER_NAME} with NODE_TAG: $NODE_TAG"

docker run \
    -d \
    --name "$CONTAINER_NAME" \
    --entrypoint "" \
    --network host \
    -v $TARGET_DIR:/out \
    -v $TARGET_DIR/.sync_cache-$CHAIN:/.sync_cache \
    ghcr.io/midnight-ntwrk/midnight-node-toolkit:$NODE_TAG \
    sleep infinity
